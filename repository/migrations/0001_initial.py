# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-23 23:15
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='用户名')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='email address')),
                ('uid', models.CharField(max_length=64, unique=True)),
                ('mobile', models.BigIntegerField(help_text='用于手机验证码登录', unique=True, verbose_name='手机')),
                ('qq', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='QQ')),
                ('weixin', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='微信')),
                ('signature', models.CharField(blank=True, max_length=255, null=True, verbose_name='个人签名')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='个人介绍')),
                ('openid', models.CharField(blank=True, max_length=128, null=True)),
                ('gender', models.SmallIntegerField(choices=[(0, '保密'), (1, '男'), (2, '女')], default=0, verbose_name='性别')),
                ('degree', models.PositiveSmallIntegerField(blank=True, choices=[(0, '学历'), (1, '高中以下'), (2, '中专／高中'), (3, '大专'), (4, '本科'), (5, '硕士'), (6, '博士')], default=0, null=True, verbose_name='学历')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('id_card', models.CharField(blank=True, max_length=32, null=True, verbose_name='身份证号或护照号')),
                ('password', models.CharField(help_text="<a class='btn-link' href='password'>重置密码</a>", max_length=128, verbose_name='password')),
                ('is_active', models.BooleanField(default=True, verbose_name='账户状态')),
                ('is_staff', models.BooleanField(default=False, help_text='决定着用户是否可登录管理后台', verbose_name='staff status')),
                ('name', models.CharField(default='', max_length=32, verbose_name='真实姓名')),
                ('head_img', models.CharField(default='/static/frontend/head_portrait/logo@2x.png', max_length=128, verbose_name='个人头像')),
                ('role', models.SmallIntegerField(choices=[(0, '学员'), (1, '导师'), (2, '讲师'), (3, '管理员')], default=0, verbose_name='角色')),
                ('memo', models.TextField(blank=True, default=None, null=True, verbose_name='备注')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
            ],
            options={
                'verbose_name': '账户信息',
                'verbose_name_plural': '账户信息',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='回答')),
                ('agree_number', models.IntegerField(default=0, verbose_name='点赞数')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='点踩数')),
                ('answer_date', models.DateTimeField(auto_now=True, verbose_name='日期')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='回答者')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=512, verbose_name='评论内容')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='评论者')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Answer')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.AnswerComment', verbose_name='基于评论的评论')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='标题')),
                ('article_type', models.SmallIntegerField(choices=[(0, '资讯'), (1, '视频')], default=0)),
                ('brief', models.TextField(max_length=512, verbose_name='摘要')),
                ('head_img', models.CharField(max_length=255)),
                ('content', models.TextField(verbose_name='文章正文')),
                ('pub_date', models.DateTimeField(verbose_name='上架日期')),
                ('offline_date', models.DateTimeField(verbose_name='下架日期')),
                ('status', models.SmallIntegerField(choices=[(0, '在线'), (1, '下线')], default=0, verbose_name='状态')),
                ('order', models.SmallIntegerField(default=0, help_text='文章想置顶，可以把数字调大，不要超过1000', verbose_name='权重')),
                ('vid', models.CharField(blank=True, help_text='文章类型是视频, 则需要添加视频VID', max_length=128, null=True, verbose_name='视频VID')),
                ('comment_num', models.SmallIntegerField(default=0, verbose_name='评论数')),
                ('agree_num', models.SmallIntegerField(default=0, verbose_name='点赞数')),
                ('view_num', models.SmallIntegerField(default=0, verbose_name='观看数')),
                ('collect_num', models.SmallIntegerField(default=0, verbose_name='收藏数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('position', models.SmallIntegerField(choices=[(0, '信息流'), (1, 'banner大图'), (2, 'banner小图')], default=0, verbose_name='位置')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BulletScreen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255)),
                ('play_point', models.IntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='市')),
                ('name', models.CharField(max_length=64, verbose_name='市名称')),
            ],
            options={
                'verbose_name': '市',
                'verbose_name_plural': '市',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content', models.TextField(max_length=1024)),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='会员名')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='类型')),
                ('p_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Comment', verbose_name='父级评论')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='活动名称')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='优惠券介绍')),
                ('coupon_type', models.SmallIntegerField(choices=[(0, '通用券'), (1, '满减券'), (2, '折扣券')], default=0, verbose_name='券类型')),
                ('money_equivalent_value', models.IntegerField(verbose_name='等值货币')),
                ('off_percent', models.PositiveSmallIntegerField(blank=True, help_text='只针对折扣券，例7.9折，写79', null=True, verbose_name='折扣百分比')),
                ('minimum_consume', models.PositiveIntegerField(default=0, help_text='仅在满减券时填写此字段', verbose_name='最低消费')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='可以把优惠券跟课程绑定', null=True, verbose_name='绑定课程')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='数量(张)')),
                ('open_date', models.DateField(verbose_name='优惠券领取开始时间')),
                ('close_date', models.DateField(verbose_name='优惠券领取结束时间')),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始时间')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效结束时间')),
                ('coupon_valid_days', models.PositiveIntegerField(blank=True, help_text='自券被领时开始算起', null=True, verbose_name='优惠券有效期（天）')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='CouponRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=64, unique=True)),
                ('status', models.SmallIntegerField(choices=[(0, '未使用'), (1, '已使用'), (2, '已过期'), (3, '未领取')], default=0)),
                ('get_time', models.DateTimeField(blank=True, help_text='用户领取时间', null=True, verbose_name='领取时间')),
                ('used_time', models.DateTimeField(blank=True, null=True, verbose_name='使用时间')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='生成时间')),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='使用者')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Coupon')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('course_img', models.CharField(max_length=255)),
                ('course_type', models.SmallIntegerField(choices=[(0, '付费'), (1, 'VIP专享'), (2, '学位课程')])),
                ('brief', models.TextField(max_length=2048, verbose_name='课程概述')),
                ('level', models.SmallIntegerField(choices=[(0, '初级'), (1, '中级'), (2, '高级')], default=1)),
                ('pub_date', models.DateField(blank=True, null=True, verbose_name='发布日期')),
                ('period', models.PositiveIntegerField(default=7, verbose_name='建议学习周期(days)')),
                ('order', models.IntegerField(help_text='从上一个课程数字往后排', verbose_name='课程顺序')),
                ('attachment_path', models.CharField(blank=True, max_length=128, null=True, verbose_name='课件路径')),
                ('status', models.SmallIntegerField(choices=[(0, '上线'), (1, '下线'), (2, '预上线')], default=0)),
                ('template_id', models.SmallIntegerField(default=1, verbose_name='前端模板id')),
            ],
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': '课程大类',
                'verbose_name_plural': '课程大类',
            },
        ),
        migrations.CreateModel(
            name='CourseChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.SmallIntegerField(default=1, verbose_name='第几章')),
                ('name', models.CharField(max_length=128)),
                ('summary', models.TextField(blank=True, null=True, verbose_name='章节介绍')),
                ('pub_date', models.DateField(auto_now_add=True, verbose_name='发布日期')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coursechapters', to='repository.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.IntegerField(verbose_name='课时')),
                ('course_slogan', models.CharField(blank=True, max_length=125, null=True)),
                ('video_brief_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='课程介绍')),
                ('why_study', models.TextField(verbose_name='为什么学习这门课程')),
                ('what_to_study_brief', models.TextField(verbose_name='我将学到哪些内容')),
                ('career_improvement', models.TextField(verbose_name='此项目如何有助于我的职业生涯')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
                ('course', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.Course')),
                ('recommend_courses', models.ManyToManyField(blank=True, related_name='recommend_by', to='repository.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseOutline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('content', models.TextField(max_length=2048, verbose_name='内容')),
                ('course_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseDetail')),
            ],
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about_teacher', models.FloatField(default=0, verbose_name='讲师讲解是否清晰')),
                ('about_video', models.FloatField(default=0, verbose_name='内容实用')),
                ('about_course', models.FloatField(default=0, verbose_name='课程内容通俗易懂')),
                ('review', models.TextField(max_length=1024, verbose_name='评价')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='评价日期')),
                ('is_recommend', models.BooleanField(default=False, verbose_name='热评推荐')),
                ('hide', models.BooleanField(default=False, verbose_name='不在前端页面显示此条评价')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommend_date', models.DateField(verbose_name='推荐交作业日期')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('order', models.PositiveSmallIntegerField(help_text='建议每个课时之间空1至2个值，以备后续插入课时', verbose_name='课时排序')),
                ('section_type', models.SmallIntegerField(choices=[(0, '文档'), (1, '练习'), (2, '视频')], default=2)),
                ('section_link', models.CharField(blank=True, help_text='若是video，填vid,若是文档，填link', max_length=255, null=True)),
                ('video_time', models.CharField(blank=True, max_length=32, null=True, verbose_name='视频时长')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('free_trail', models.BooleanField(default=False, verbose_name='是否可试看')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coursesections', to='repository.CourseChapter')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseCategory')),
            ],
            options={
                'verbose_name': '课程子类',
                'verbose_name_plural': '课程子类',
            },
        ),
        migrations.CreateModel(
            name='DegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('course_img', models.CharField(max_length=255, verbose_name='缩略图')),
                ('brief', models.TextField(verbose_name='学位课程简介')),
                ('total_scholarship', models.PositiveIntegerField(default=40000, verbose_name='总奖学金(贝里)')),
                ('mentor_compensation_bonus', models.PositiveIntegerField(default=15000, verbose_name='本课程的导师辅导费用(贝里)')),
                ('period', models.PositiveIntegerField(default=150, verbose_name='建议学习周期(days)')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
            ],
        ),
        migrations.CreateModel(
            name='DegreeCourseReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about_teacher', models.FloatField(default=0, verbose_name='讲师讲解是否清晰')),
                ('about_video', models.FloatField(default=0, verbose_name='视频质量')),
                ('about_course', models.FloatField(default=0, verbose_name='课程')),
                ('review', models.TextField(max_length=1024, verbose_name='评价')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='踩')),
                ('agree_number', models.IntegerField(default=0, verbose_name='赞同数')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='评价日期')),
                ('is_recommend', models.BooleanField(default=False, verbose_name='热评推荐')),
                ('hide', models.BooleanField(default=False, verbose_name='不在前端页面显示此条评价')),
                ('course', models.ForeignKey(blank=True, help_text='不填写即代表评价整个学位课程', null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Course', verbose_name='评价学位模块')),
            ],
        ),
        migrations.CreateModel(
            name='DegreeRegistrationForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_company', models.CharField(max_length=64)),
                ('current_position', models.CharField(max_length=64)),
                ('current_salary', models.IntegerField()),
                ('work_experience', models.IntegerField()),
                ('open_module', models.BooleanField(default=True, verbose_name='是否开通第1模块')),
                ('stu_specified_mentor', models.CharField(blank=True, max_length=32, null=True, verbose_name='学员自行指定的导师名')),
                ('study_plan', models.SmallIntegerField(choices=[(0, '1-2小时/天'), (1, '2-3小时/天'), (2, '3-5小时/天'), (3, '5小时+/天')], default=1)),
                ('why_take_this_course', models.TextField(max_length=1024, verbose_name='报此课程原因')),
                ('why_choose_us', models.TextField(max_length=1024, verbose_name='为何选路飞')),
                ('your_expectation', models.TextField(max_length=1024, verbose_name='你的期待')),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnrolledCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('valid_begin_date', models.DateField(verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(verbose_name='有效期结束至')),
                ('status', models.SmallIntegerField(choices=[(0, '已开通'), (1, '已过期')], default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Course')),
            ],
        ),
        migrations.CreateModel(
            name='EnrolledDegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效期结束至')),
                ('study_status', models.SmallIntegerField(choices=[(0, '在学中'), (1, '休学中'), (2, '已毕业'), (3, '超时结业'), (4, '未开始')], default=0)),
                ('mentor_fee_balance', models.PositiveIntegerField(help_text='这个学员的导师费用，每有惩罚，需在此字段同时扣除', verbose_name='导师费用余额')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.DegreeCourse')),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='my_students', to='repository.Account', verbose_name='导师')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('contact', models.CharField(blank=True, max_length=64, null=True)),
                ('feedback_type', models.SmallIntegerField(choices=[(0, '网站优化建议'), (1, '烂!我想吐槽'), (2, '网站bug反馈')])),
                ('content', models.TextField(max_length=1024)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='作业题目')),
                ('order', models.PositiveSmallIntegerField(help_text='同一课程的每个作业之前的order值间隔1-2个数', verbose_name='作业顺序')),
                ('homework_type', models.SmallIntegerField(choices=[(0, '作业'), (1, '模块通关考核')], default=0)),
                ('requirement', models.TextField(max_length=1024, verbose_name='作业需求')),
                ('threshold', models.TextField(max_length=1024, verbose_name='踩分点')),
                ('recommend_period', models.PositiveSmallIntegerField(default=7, verbose_name='推荐完成周期(天)')),
                ('scholarship_value', models.PositiveSmallIntegerField(verbose_name='为该作业分配的奖学金(贝里)')),
                ('note', models.TextField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True, help_text='本作业如果后期不需要了，不想让学员看到，可以设置为False')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseChapter')),
            ],
        ),
        migrations.CreateModel(
            name='HomeworkRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(blank=True, choices=[(100, 'A+'), (90, 'A'), (85, 'B+'), (80, 'B'), (70, 'B-'), (60, 'C+'), (50, 'C'), (40, 'C-'), (-1, 'D'), (0, 'N/A'), (-100, 'COPY')], null=True, verbose_name='分数')),
                ('mentor_comment', models.TextField(blank=True, null=True, verbose_name='导师批注')),
                ('status', models.SmallIntegerField(choices=[(0, '待批改'), (1, '已通过'), (2, '不合格')], default=0, verbose_name='作业状态')),
                ('submit_num', models.SmallIntegerField(default=0, verbose_name='提交次数')),
                ('correct_date', models.DateTimeField(blank=True, null=True, verbose_name='备注日期')),
                ('note', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='作业提交日期')),
                ('check_date', models.DateTimeField(blank=True, null=True, verbose_name='批改日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='提交日期')),
                ('reward_status', models.SmallIntegerField(default=0, verbose_name='作业记录奖惩状态')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Homework')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_stu_homework_record', to='repository.Account', verbose_name='导师')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledDegreeCourse', verbose_name='学生')),
            ],
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='行业代码')),
                ('name', models.CharField(max_length=64, verbose_name='行业名称')),
            ],
            options={
                'verbose_name': '行业信息',
                'verbose_name_plural': '行业信息',
            },
        ),
        migrations.CreateModel(
            name='MentorGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('brief', models.TextField(blank=True, null=True)),
                ('mentors', models.ManyToManyField(to='repository.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_obj', models.CharField(help_text='account_id,email、mobile、open_id', max_length=64, verbose_name='通知对象')),
                ('content', models.TextField(max_length=1024)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='消息添加时间')),
                ('msg_type', models.SmallIntegerField(choices=[(0, '奖惩通知'), (1, '订单通知'), (2, '专题课程报名'), (3, '课程过期'), (4, '课程评论'), (5, '优惠券通知'), (6, '课程开课通知'), (7, '学位课程作业'), (8, '学位课程问答'), (9, '资讯阅读通知'), (11, '课程问答'), (12, '学位课程报名'), (13, '导师分配通知'), (15, '学位学习事务通知'), (16, '其他')])),
                ('notify_type', models.SmallIntegerField(choices=[(0, '站内信'), (1, '短信'), (2, '邮件'), (3, '微信'), (4, '其它')])),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='关联对象')),
                ('apply_now', models.BooleanField(default=False, help_text='如果需要立刻通知用户，请勾选', verbose_name='是否立即执行')),
                ('applied_status', models.BooleanField(default=False, help_text='消息通知是否已被执行', verbose_name='是否已被执行')),
                ('excution_status', models.BooleanField(default=False, verbose_name='执行是否成功')),
                ('excution_result', models.TextField(blank=True, null=True, verbose_name='执行返回结果')),
                ('applied_date', models.DateTimeField(blank=True, help_text='若不是立刻执行，需设置执行时间', null=True, verbose_name='通知日期时间')),
                ('account', models.ForeignKey(blank=True, help_text='不填用户的话代表给未注册用户发通知', null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='OftenAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField(max_length=1024)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.SmallIntegerField(choices=[(0, '微信'), (1, '支付宝'), (2, '优惠码'), (3, '贝里')])),
                ('payment_number', models.CharField(blank=True, max_length=128, null=True, verbose_name='支付第3方订单号')),
                ('order_number', models.CharField(max_length=128, unique=True, verbose_name='订单号')),
                ('actual_amount', models.FloatField(verbose_name='实付金额')),
                ('status', models.SmallIntegerField(choices=[(0, '交易成功'), (1, '待支付'), (2, '退费申请中'), (3, '已退费'), (4, '主动取消'), (5, '超时取消')], verbose_name='状态')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='订单生成时间')),
                ('pay_time', models.DateTimeField(blank=True, null=True, verbose_name='付款时间')),
                ('cancel_time', models.DateTimeField(blank=True, null=True, verbose_name='订单取消时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('original_price', models.FloatField(verbose_name='课程原价')),
                ('price', models.FloatField(verbose_name='折后价格')),
                ('content', models.CharField(blank=True, max_length=255, null=True)),
                ('valid_period_display', models.CharField(max_length=32, verbose_name='有效期显示')),
                ('valid_period', models.PositiveIntegerField(verbose_name='有效期(days)')),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Order')),
            ],
        ),
        migrations.CreateModel(
            name='PricePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('valid_period', models.SmallIntegerField(choices=[(1, '1天'), (3, '3天'), (7, '1周'), (14, '2周'), (30, '1个月'), (60, '2个月'), (90, '3个月'), (180, '6个月'), (210, '12个月'), (540, '18个月'), (720, '24个月')])),
                ('price', models.FloatField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(verbose_name='职位代码')),
                ('name', models.CharField(max_length=64, verbose_name='职位名称')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Industry')),
            ],
            options={
                'verbose_name': '职位信息',
                'verbose_name_plural': '职位信息',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='省代码')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='省名称')),
            ],
            options={
                'verbose_name': '省',
                'verbose_name_plural': '省',
            },
        ),
        migrations.CreateModel(
            name='QACounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('data_type', models.SmallIntegerField(choices=[(0, '点赞'), (1, '踩'), (2, '同问')])),
                ('date', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='问题概要')),
                ('question_type', models.SmallIntegerField(choices=[(0, '专题课程问题'), (1, '学位课程问题')], default=0, verbose_name='来源')),
                ('content', models.TextField(max_length=1024, verbose_name='问题内容')),
                ('enquiries_count', models.IntegerField(default=0, verbose_name='同问者计数')),
                ('attachment_path', models.CharField(blank=True, help_text='问题记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(choices=[(0, '待解答'), (1, '已解答'), (2, '已关闭')], default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='提问者')),
                ('course_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.CourseSection')),
                ('degree_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.DegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_percent', models.PositiveSmallIntegerField(help_text='只填百分值，如80,代表80%', verbose_name='奖励档位(时间百分比)')),
                ('value', models.PositiveIntegerField(verbose_name='奖学金数额')),
                ('degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.DegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('score', models.IntegerField(verbose_name='金额(贝里)')),
                ('received_score', models.IntegerField(default=0, help_text='仅奖励用', verbose_name='实际到账金额贝里)')),
                ('balance', models.PositiveIntegerField(verbose_name='奖金余额(贝里)')),
                ('maturity_date', models.DateField(verbose_name='成熟日期(可提现日期)')),
                ('applied', models.BooleanField(default=False, help_text='奖赏纪录是否已被执行', verbose_name='是否已被执行')),
                ('applied_date', models.DateTimeField(blank=True, null=True, verbose_name='事件生效日期')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='事件触发日期')),
                ('memo', models.TextField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account', verbose_name='被执行人')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('degree_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.DegreeCourse', verbose_name='关联学位课程')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.SmallIntegerField(choices=[(0, '未按时交作业'), (1, '未及时批改作业'), (2, '作业成绩'), (3, '未在规定时间内对学员进行跟进'), (4, '未在规定时间内回复学员问题'), (5, '收到学员投诉'), (6, '导师相关'), (7, '学位奖学金')], verbose_name='积分规则')),
                ('score_type', models.SmallIntegerField(choices=[(0, '奖励'), (1, '惩罚'), (2, '初始分配')], default=0, verbose_name='奖惩')),
                ('score', models.IntegerField(help_text='扣分数与贝里相等,若为0则代表规则的值可以从别处取得')),
                ('memo', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_date', models.DateField(blank=True, null=True, verbose_name='开通日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='完成日期')),
                ('status', models.SmallIntegerField(choices=[(2, '在学'), (1, '未开通'), (0, '已完成')], default=1)),
                ('course_module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Course', verbose_name='学位模块')),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledDegreeCourse')),
            ],
        ),
        migrations.CreateModel(
            name='StuFollowUpRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followup_tool', models.SmallIntegerField(choices=[(0, 'QQ'), (1, '微信'), (2, '电话'), (3, '系统通知')], default=1)),
                ('record', models.TextField(verbose_name='跟进记录')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledDegreeCourse', verbose_name='学生')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor', to='repository.Account', verbose_name='导师')),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_type', models.SmallIntegerField(choices=[(0, '文章标签'), (1, '课程评价标签'), (2, '用户感兴趣技术标签')])),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('role', models.SmallIntegerField(choices=[(0, '讲师'), (1, '导师')], default=0)),
                ('title', models.CharField(max_length=64, verbose_name='职位、职称')),
                ('signature', models.CharField(blank=True, help_text='导师签名', max_length=255, null=True)),
                ('image', models.CharField(max_length=128)),
                ('brief', models.TextField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='金额')),
                ('balance', models.IntegerField(verbose_name='账户余额')),
                ('transaction_type', models.SmallIntegerField(choices=[(0, '收入'), (1, '支出'), (2, '退款'), (3, '提现')])),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='关联对象')),
                ('transaction_number', models.CharField(max_length=128, unique=True, verbose_name='流水号')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Account')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='scorerule',
            unique_together=set([('rule', 'score_type')]),
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='score_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ScoreRule', verbose_name='关联规则'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.OrderDetail'),
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.OrderDetail'),
        ),
        migrations.AddField(
            model_name='degreeregistrationform',
            name='enrolled_degree',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledDegreeCourse'),
        ),
        migrations.AddField(
            model_name='degreecoursereview',
            name='enrolled_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledDegreeCourse'),
        ),
        migrations.AddField(
            model_name='degreecoursereview',
            name='tags',
            field=models.ManyToManyField(blank=True, to='repository.Tags', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='degreecourse',
            name='teachers',
            field=models.ManyToManyField(to='repository.Teacher', verbose_name='课程讲师'),
        ),
        migrations.AddField(
            model_name='courseschedule',
            name='homework',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Homework'),
        ),
        migrations.AddField(
            model_name='courseschedule',
            name='study_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.StudyRecord'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='enrolled_course',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.EnrolledCourse'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='tags',
            field=models.ManyToManyField(blank=True, to='repository.Tags', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='coursedetail',
            name='teachers',
            field=models.ManyToManyField(to='repository.Teacher', verbose_name='课程讲师'),
        ),
        migrations.AddField(
            model_name='course',
            name='degree_course',
            field=models.ForeignKey(blank=True, help_text='若是学位课程，此处关联学位表', null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.DegreeCourse'),
        ),
        migrations.AddField(
            model_name='course',
            name='sub_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseSubCategory'),
        ),
        migrations.AddField(
            model_name='couponrecord',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Order', verbose_name='关联订单'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Province'),
        ),
        migrations.AddField(
            model_name='bulletscreen',
            name='course_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CourseSection'),
        ),
        migrations.AddField(
            model_name='article',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.ArticleSource', verbose_name='来源'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='repository.Tags', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Question', verbose_name='问题'),
        ),
        migrations.AddField(
            model_name='account',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.City', verbose_name='城市'),
        ),
        migrations.AddField(
            model_name='account',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Profession', verbose_name='职位信息'),
        ),
        migrations.AddField(
            model_name='account',
            name='tags',
            field=models.ManyToManyField(blank=True, to='repository.Tags', verbose_name='感兴趣的标签'),
        ),
        migrations.AlterUniqueTogether(
            name='studyrecord',
            unique_together=set([('enrolled_degree_course', 'course_module')]),
        ),
        migrations.AlterUniqueTogether(
            name='qacounter',
            unique_together=set([('content_type', 'object_id', 'account')]),
        ),
        migrations.AlterUniqueTogether(
            name='profession',
            unique_together=set([('code', 'industry')]),
        ),
        migrations.AlterUniqueTogether(
            name='pricepolicy',
            unique_together=set([('content_type', 'object_id', 'valid_period')]),
        ),
        migrations.AlterUniqueTogether(
            name='orderdetail',
            unique_together=set([('order', 'content_type', 'object_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='oftenaskedquestion',
            unique_together=set([('content_type', 'object_id', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='homeworkrecord',
            unique_together=set([('homework', 'student')]),
        ),
        migrations.AlterUniqueTogether(
            name='homework',
            unique_together=set([('chapter', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='enrolleddegreecourse',
            unique_together=set([('account', 'degree_course')]),
        ),
        migrations.AlterUniqueTogether(
            name='coursesection',
            unique_together=set([('chapter', 'section_link')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseschedule',
            unique_together=set([('study_record', 'homework')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseoutline',
            unique_together=set([('course_detail', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='coursechapter',
            unique_together=set([('course', 'chapter')]),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together=set([('content_type', 'object_id', 'account')]),
        ),
    ]
